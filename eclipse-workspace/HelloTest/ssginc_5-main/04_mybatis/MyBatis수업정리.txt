MyBatis 프레임워크

1. 개요
 - JDBC 사용을 편리하고 효율적으로 기능이 추가된 형태의 SQL Mapping Framework 프레임워크.
 - ibatis ( OLD 버전 )

2. 홈페이지에 가서 필요한 jar 다운로드 하자.
  http://mybatis.org

  1) mybatis-3.5.14 선택
  2) assets
     mybatis-3.5.14.zip 다운

  3) 압축풀기
    mybatis-3.5.14.jar ( build path 대상임)
    mybatis-3.5.14.pdf ( 메뉴얼, https://mybatis.org/mybatis-3/ )

3. 이클립스에서 build path
   1) 프로젝트 생성
   2) 2개의 jar 파일 build path
     - mysql-connector-j-8.jar  ( mysql 드라이버 )
     - mybatis-3.5.14.jar

    
     - 자바프로젝트 선택 > 오른쪽 클릭 > build path > configure build path > 3번째 탭 libraries > 
       classpath 선택하고 오른쪽 항목에서  Add External jars.. 클릭 >
        mysql-connector-j-8.3.0.jar 와 mybatis-3.5.14.jar 선택


4. MyBatis 사용방법

   1)  JDBC에서 사용했던 4가지 정보를 외부파일에 저장.
       => jdbc.properties
       => src 폴더에 저장. ( 패키지 설정 가능 )

     * properties 에 저장하는 형식
      key=value
      key=value

     jdbc.driver=com.mysql.cj.jdbc.Driver
     jdbc.url=jdbc:mysql://localhost:3306/testdb
     jdbc.userid=root
     jdbc.passwd=1234

   2) 최소 2개의 xml 파일이 필요
     ==> *.xml 
     => src 폴더에 저장. ( 패키지 설정 가능 )

      가. 설정 파일
      https://mybatis.org/mybatis-3/getting-started.html#building-sqlsessionfactory-from-xml
        - 용도: mybatis 사용시 환경설정 정보들 관리( DB연동정보, DTO별칭, mapper 등록)
        - Configuration.xml
        

      나. mapper 파일
      https://mybatis.org/mybatis-3/getting-started.html#exploring-mapped-sql-statements
        - 용도: JDBC에서 사용했던 SQL문을 저장하는 파일.
	- 테이블당 하나씩 작성. ( 테이블명Mapper.xml )
	- DeptMapper.xml
	  EmpMapper.xml

     *  Configuration.xml 파일을 읽는 자바코드가 필요.
      ==> com.config.MySqlSessionFactory.java 만들고 복사해서 사용.

     public class MySqlSessionFactory {
  
	static SqlSessionFactory sqlSessionFactory;
	static {
		String resource = "com/config/Configuration.xml";
		  InputStream inputStream=null;
		try {
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e) {
			e.printStackTrace();
		}
sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}//end static 블럭
	
	// SqlSessionFactory 로부터 SqlSession 얻는 메서드
	public static SqlSession getSession() {
		// MyBatis는 명시적으로 commit 지정해야 된다.
		SqlSession session = sqlSessionFactory.openSession(); // openSession(false) 동일
		return session;
	}
	

    * JDBC vs MyBatis

      가. JDBC에서 필요한 API

          - Connection
	  - PreparedStatement
	  - ResultSet

      나. MyBatis에서 필요한 API

          - SqlSessionFactory
	  - SqlSession (***********)
	   ==> SqlSession session  = MySqlSessionFactory.getSession();


    * SqlSession의 메서드	  
     ==> DeptMapper.xml 에 있는 태그를 호출하는 메서드

      가. select 작업
	  # 단일 레코드 반환
	  DeptDTO dto = session.selectOne("namespace명.mapper의 id값");
          DeptDTO dto = session.selectOne("namespace명.mapper의 id값", Object obj); // obj는 where절에 사용

	  # 다중 레코드 반환
	  List<DeptDTO> list = session.selectList("namespace명.mapper의 id값");
          List<DeptDTO> list = session.selectList("namespace명.mapper의 id값", Object obj); // obj는 where절에 사용

      나. insert 작업
	  int n = session.insert("namespace명.mapper의 id값");
          int n = session.insert("namespace명.mapper의 id값", Object obj); // obj는 저장할 데이터

      다. update 작업
          int n = session.update("namespace명.mapper의 id값");
          int n = session.update("namespace명.mapper의 id값", Object obj); // obj는 수정할 데이터

      라. delete 작업

          int n = session.delete("mapper의 id값");
          int n = session.delete("mapper의 id값", Object obj); // obj는 삭제할 데이터


   3) 하나의 레코드를 저장하는 DTO 작성 (******)
     ==> select 된 결과인 레코드를 자동으로 DTO에 저장한다.
         단, 연결고리가 존재한다. 
	    테이블의 컬럼명(원칙은 컬럼헤더값)과 DTO의 변수명이 일치해야 된다.

	 예>
	     create table dept
	     ( deptno INT PRIMARY KEY,
	       dname  VARCHAR(20),
	       loc    VARCHAR(20) );

	     select deptno as no, dname, loc -- int deptno에 저장 안됨.
	     from dept;

	    public class DeptDTO{

               int deptno;
	       String dname;
	       String loc;

     * parameterType="전달할 파라미터의 타입" 종류
        https://mybatis.org/mybatis-3/configuration.html#typealiases



     * 자동으로 select 한 결과가 DTO 저장(setXXX 이용)이 되고
       반대로 파라미터로 전달한 DTO의 변수값이 #{변수값} ( getXXX 이용 )로 치환이 됨.

       - 가능한이유? 테이블의 컬럼명과 DTO의 변수명이 일치하기 때문이다.
                  정확한 문법은 컬럼명과 DTO의 getXXX() 와 setXXX()가 되어야 된다.


     * id 값이 일치하지 않는 경우의 에러
     Mapped Statements collection does not contain value for findByDnameOrLoc3

    
  4) com.dto.DeptDTO 의 별칭 지정하기
  
    ==>  com.dto.DeptDTO 을 DeptDTO(별칭) 지정
    ==> Configuration.xml에서 별칭 지정하고 Mapper에서 별칭을 사용한다.

    문법:
       <typeAliases>
          <typeAlias alias="DeptDTO" type="com.dto.DeptDTO"/>

######################################################################

5. MyBatis 동적sql 처리 ( emp 테이블로 실습 )

 1) 다중 insert 처리

   mysql sql문:
          insert into emp ( empno,ename,sal)
	  valuse (10,'a',100),(20,'a',100),(),...;


  mybatis sql문:
       <insert id="multiInsert" parameterType="arraylist">
          insert into emp ( empno,ename,sal)
	  valuse
	  <foreach  item="dto"    collection="list" , separator=",">
	      (#{dto.empno},#{dto.ename} , #{dto.sal})
	  </foreach>
       </insert>

 2) 다중 delete 처리

     mysql sql문:
                  delete from emp
		  where sal IN ( 800, 1000, .. );

    mybatis sql문1: 무조건 sal 전달됨.
                   
               <delete id="remove" parameterType="arraylist">
		  delete from emp
		  where sal IN
	           <foreach   item="x"  collection="list" open="(" separator="," close=")">
                         #{x}
		  </foreach>

   mybatis sql문2:  sal 전달안될수도 있는 경우.
                   
               <delete id="remove" parameterType="arraylist">
		  delete from emp
		  <where> 
	            <foreach   item="x"  collection="list" open="sal IN (" separator=","     close=")">
                         #{x}
		    </foreach>
                  <where> 
  3) 다중 update 문
      
       mysql sql문:
                   update emp
		   set sal = sal + 100
                   where empno IN ( 800, 1000, .. );

       mybatis sql문:

                <update id="update" paratmeter="arraylist">
                   update emp
		   set sal = sal + 100
                   <where>
                      <foreach item="x" collection="list" open="empno IN (" 
		                        separator="," close=")">
                           #{x}

                      </foreach>
		   </where>
		</update>


  4) 선택적 update 문

        
      mysql sql문: 어떤 컬럼을 수정할지 잘 모르는 경우
                  예> sal 또는 ename 또는 2개모두

                 update emp
		 --set sal = 값
		 --set ename = 값
		 set sal = 값, ename = 값
		 where empno= 값;

      mybatis sql문:
                
		update emp
                <set>
                    <if test="sal != 0">sal=#{sal},  </if>
		    <if test="ename !=null">ename=#{ename}</if>
                </set>
		where empno = 값


   5) 조건이 여러개

      mysql sql문:   job 이 'MANAGER' 인 경우  sal > 1500 조회
                    job 이 'SALESMAN' 인 경우  sal > 2500 조회
		    모두 아니면  sal > 3000 조회

       mybatis sql문:
         
	           select 
		   from emp
		   <where>
                       <choose>
                          <when test="job == 'MANAGER'">sal > 1500</when>
                          <when test="job == 'SALESMAN'">sal > 2500</when>
			  <otherwise>sal > 3000</otherwise>
		       </choose>
		   </where>
                
    
    6) 단일값 조회

       예>
           select count(*) as cnt
	   from emp;

           cnt
	   -------
	   15

       JDBC 이용:
               rs.next();
	       rs.getInt(1);  // rs.getInt("cnt")

       MyBatis 이용
                <select id="cnt"  resultType="int">
	        int cnt =session.selectOne("cnt");
	       
    7) 페이징 처리

        가. 내림차순 정렬 
           <!-- 페이징 처리 -->
	      <select id="paging" resultType="EmpDTO">
		select empno, ename, sal
		from emp
		order by empno desc
	      </select>
	나. selectList("", 파라미터, new RoundBounds(skip, 갯수) )
	 예>
         	int curPage=2;
		int perPage=3; // 페이지당 보여줄 레코드 갯수
		int skip = (curPage-1)*perPage;
		
                List<EmpDTO> list7 = session.selectList("com.config.EmpMapper.paging", null, 
		                           new RowBounds(skip, perPage));


   8) CDATA 섹션 정리
   => XML 문법
   => CDATA (Character DATA) 표현식

     <![CDATA[
       SQL문
     ]]>

    * > : &gt;
      <  : &lt;
      공백: &nbsp;
      "  : &quot;

#############################################################
Mybatis 아키텍쳐

1) 아키텍쳐
                           EmpService(인터페이스)
                               |
 EmpMain       <-------->  EmpServiceImpl(클래스) <----------> EmpDAO <-----------> MySQL
 (main메서드)               - 비즈니스로직 처리                   - DB 연동
 -사용자입력및               - 트랜잭션처리(***)
  출력(화면처리)
                                                 EmpDTO
						 - 데이터 전달용

2) MyBatis 연동

  가. MySQL 드라이버 및 MyBatis 라이브러리 다운로드 및 build path
     mysql-connector-j-8.3.0.jar
     mybatis-3.5.14.jar

  나. DB 연동시 필요한 4개의 값을 저장한 jdbc.properties 작성
    => src 폴더 ( classpath 경로 )
    => package 형식 사용 가능 ( 예> com.config.jdbc.properties )
       접근할 때는 / 경로 사용 ( 예> com/confog/jdbc.properties )
    
    * 환경변수
     JAVA_HOME=jdk홈디렉토리경로
     PATH=명령어경로;명령어경로1
     CLASSPATH=클래스파일이있는경로(*.jar)

  다. 테이블의 컬럼을 저장하기 위한 DTO 클래스 작성
     ==> emp 테이블 레코드 저장용으로 com.dto.EmpDTO 작성
     ==> 자동으로 mapping해서 사용하기 위해서
         EmpDTO의 변수명은 가능하면 emp 테이블의 컬럼명으로 지정한다.
         반드시 테이블의 컬럼명으로 지정된 set컬러명() , get컬럼명() 지정해야 된다.(******)
     ==> DTO 는 기본생성자가 필수이다.
       이유는 <select id="paging" resultType="EmpDTO"> 지정하면
       내부적으로 시스템이 기본생성자를 이용해서 EmpDTO를 객체생성한다.
     ==> 테이블당 한개씩 작성.
  
  라. 2개의 xml 작성
     => src 폴더 ( classpath 경로 )
     => package 형식 사용 가능 ( 예> com.config.Configuration.xml )
       접근할 때는 / 경로 사용 ( 예> com/confog/Configuration.xml )

     a. 설정 정보
       - 용도: jdbc.properties 등록해서 DB 연동함.
              DTO 별칭 지정.
	      mapper 등록.
 https://mybatis.org/mybatis-3/getting-started.html#building-sqlsessionfactory-from-xml 참조
	예> Configuration.xml


     b. sql 정보
       - 용도: sql 문 설정.
       - 테이블당 한개씩 작성.
       - 테이블Mapper.xml 명명법 권장.
https://mybatis.org/mybatis-3/getting-started.html#exploring-mapped-sql-statements 참조
        예> EmpMapper.xml


   마. Configuration.xml를 자바코드로 읽기
https://mybatis.org/mybatis-3/getting-started.html#building-sqlsessionfactory-from-xml 참조

  원본:
        String resource = "org/mybatis/example/mybatis-config.xml";
	InputStream inputStream = Resources.getResourceAsStream(resource);
	SqlSessionFactory sqlSessionFactory =
	  new SqlSessionFactoryBuilder().build(inputStream);

 변경: 
       MySqlSessionFactory.java

       public class MySqlSessionFactory {
  
	static SqlSessionFactory sqlSessionFactory;
	static {
		String resource = "com/config/Configuration.xml";
		  InputStream inputStream=null;
		try {
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e) {
			e.printStackTrace();
		}
sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}//end static 블럭
	
	// SqlSessionFactory 로부터 SqlSession 얻는 메서드
	public static SqlSession getSession() {
		// MyBatis는 명시적으로 commit 지정해야 된다.
		SqlSession session = sqlSessionFactory.openSession(); // openSession(false) 동일
		return session;
	}
	
##################################################################################

    바.  Service 작성
 
     a. 구조
      
       com.service.EmpService (인터페이스)
          |
      com.service.EmpServiceImpl (클래스)
    
     b. 역할
        - 비즈니스 로직
	- 트랜잭션 처리 (***** )

     c. 특징
        - SqlSession 만 얻음.
          DAO로 SqlSession를 전달해야 됨.


    * Connection 과 SqlSession 특징
    => 반드시 메서드안에서 로컬 변수로 얻어야 된다. ( thread-safe 보장 )
      이유는 공유하면 절대 안됨.
     # JDBC 버전

     public int insert(){
        Connection con = null;

	con.close();
     }
     
      public int select(){
        Connection con = null;

        con.close();
     }

   사. DAO 작성

    a. 구조
      - com.dao.EmpDAO.java

    b. 역할
      - MySQL 연동
      
     c. 특징
      - Service에서 전달한 SqlSession으로 메서드 호출해서 DB 연동.

   아. Main 작성

      a. 구조
      - com.dao.EmpMain

      b. 역할
      - 사용자 데이터 입력 및 출력 ( 화면처리 )
      
     c. 특징
      - Service 와 연동
      - EmpDAO 생성해서 Service에 설정. (****)

######################################################################
조인 ( ResultMap 활용 )
https://mybatis.org/mybatis-3/ko/sqlmap-xml.html#result-maps
